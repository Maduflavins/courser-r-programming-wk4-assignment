source('~/workspace/crda/hospital/hospitals.R')
source('~/workspace/crda/hospital/hospitals.R')
head(data)
summary(data[, c(2,7, 11,17,19,23)])
head(data)
summary(data[, c(2,7,11,17,19,23)])
head(data)
summary(data[, c(2,7,11,17,19,23)])
data[, 11] <- as.numeric(data[, 11])
hist(data[, 11])
data[, 11] <- as.numeric(data[, 11])
hist(data[, 11], main = "histogram diagram of data[, 11")
data[, 11] <- as.numeric(data[, 11])
hist(data[, 11], main = "histogram diagram of data[, 11]")
source("best.R")
best <- read.csv("hospitals.csv")
head(best)
best("SC", "heart attack")
head(best)
best("SC", "heart attack")
best("SC", "heart attack")
bests <- function(state, outcome){
##Read the data
df <- read.csv("outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) <- "numeric")
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) <- "numeric")
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) <- "numeric")
## validate provided state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state %in%df$State)){
stop("invalid state")
}
if(!(outcome %in% outcomes)){
stop("invalid outcomes")
}
## Return best hospital names(hospitals with the lowes 30-day death rate)
df2 <- df[df$State == state, ] # extracting data for specific state
if (outcome == "heart attack") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == min(df1$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = TRUE), 2],             na.rm = TRUE))
} else if (outcome == "heart failure") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == min(df1$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
na.rm = TRUE), 2], na.rm = TRUE))
} else if (outcome == "pneumonia") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia == min(df1$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
na.rm = T), 2], na.rm = TRUE))
}
}
bests("SC", "heart attack")
bests <- function(state, outcome){
##Read the data
df <- read.csv("outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack) <- "numeric")
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure) <- "numeric")
suppressWarnings(class(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia) <- "numeric")
## validate provided state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if(!(state %in%df$State)){
stop("invalid state")
}
if(!(outcome %in% outcomes)){
stop("invalid outcomes")
}
## Return best hospital names(hospitals with the lowes 30-day death rate)
df2 <- df[df$State == state, ] # extracting data for specific state
if (outcome == "heart attack") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == min(df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, na.rm = TRUE), 2],             na.rm = TRUE))
} else if (outcome == "heart failure") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure == min(df2$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
na.rm = TRUE), 2], na.rm = TRUE))
} else if (outcome == "pneumonia") {
return(min(df2[df2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia == min(df2$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
na.rm = T), 2], na.rm = TRUE))
}
}
bests("SC", "heart attack")
bests("NY", "pneumonia")
rankhospital <- function(state, outcome, num){
# Read the file outcome-of-care-measures.csv
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
#validate supplied state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% df$State)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
df1 <- df[df$State == state, c(2, 11)]
names(df1)[2] <- "Rate"
}
if (outcome == "heart failure") {
df2 <- df[df$State == state, c(2, 17)]
names(df2)[2] <- "Rate"
}
if (outcome == "pneumonia") {
df2 <- df[df$State == state, c(2, 23)]
names(df2)[2] <- "Rate"
}
# Remove rows where Ratings are not known.
df2 <- df2[!is.na(df1$Rate), ]
# Order the dataframe by Names to help in Ranking
df2 <- df2[order(df2[1]), ]
# head(df1) tail(df1)
# Set Rank
df1$rank <- rank(df1$Rate, ties.method = "first")
# Return the values based on data provided
if (num == "best") {
return(df2[df2$rank == min(df1$rank), 1])
} else if (num == "worst") {
return(df2[df2$rank == max(df2$rank), 1])
} else if ((num <= max(df2$rank)) | (num >= min(df2$rank))) {
return(df2[df2$rank == num, 1])
} else if ((num > max(df2$rank)) | (num < min(df2$rank))) {
NA
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num){
# Read the file outcome-of-care-measures.csv
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
#validate supplied state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% df$State)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
df2 <- df[df$State == state, c(2, 11)]
names(df2)[2] <- "Rate"
}
if (outcome == "heart failure") {
df2 <- df[df$State == state, c(2, 17)]
names(df2)[2] <- "Rate"
}
if (outcome == "pneumonia") {
df2 <- df[df$State == state, c(2, 23)]
names(df2)[2] <- "Rate"
}
# Remove rows where Ratings are not known.
df2 <- df2[!is.na(df1$Rate), ]
# Order the dataframe by Names to help in Ranking
df2 <- df2[order(df2[1]), ]
# head(df1) tail(df1)
# Set Rank
df1$rank <- rank(df1$Rate, ties.method = "first")
# Return the values based on data provided
if (num == "best") {
return(df2[df2$rank == min(df1$rank), 1])
} else if (num == "worst") {
return(df2[df2$rank == max(df2$rank), 1])
} else if ((num <= max(df2$rank)) | (num >= min(df2$rank))) {
return(df2[df2$rank == num, 1])
} else if ((num > max(df2$rank)) | (num < min(df2$rank))) {
NA
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num){
# Read the file outcome-of-care-measures.csv
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
#validate supplied state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% df$State)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
df2 <- df[df$State == state, c(2, 11)]
names(df2)[2] <- "Rate"
}
if (outcome == "heart failure") {
df2 <- df[df$State == state, c(2, 17)]
names(df2)[2] <- "Rate"
}
if (outcome == "pneumonia") {
df2 <- df[df$State == state, c(2, 23)]
names(df2)[2] <- "Rate"
}
# Remove rows where Ratings are not known.
df2 <- df2[!is.na(df1$Rate), ]
# Order the dataframe by Names to help in Ranking
df2 <- df2[order(df2[1]), ]
# head(df1) tail(df1)
# Set Rank
df2$rank <- rank(df2$Rate, ties.method = "first")
# Return the values based on data provided
if (num == "best") {
return(df2[df2$rank == min(df1$rank), 1])
} else if (num == "worst") {
return(df2[df2$rank == max(df2$rank), 1])
} else if ((num <= max(df2$rank)) | (num >= min(df2$rank))) {
return(df2[df2$rank == num, 1])
} else if ((num > max(df2$rank)) | (num < min(df2$rank))) {
NA
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num){
# Read the file outcome-of-care-measures.csv
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
#validate supplied state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% df$State)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
df2 <- df[df$State == state, c(2, 11)]
names(df2)[2] <- "Rate"
}
if (outcome == "heart failure") {
df2 <- df[df$State == state, c(2, 17)]
names(df2)[2] <- "Rate"
}
if (outcome == "pneumonia") {
df2 <- df[df$State == state, c(2, 23)]
names(df2)[2] <- "Rate"
}
# Remove rows where Ratings are not known.
df2 <- df2[!is.na(df1$Rate), ]
# Order the dataframe by Names to help in Ranking
df2 <- df2[order(df2[1]), ]
# head(df1) tail(df1)
# Set Rank
df2$rank <- rank(df2$Rate, ties.method = "first")
# Return the values based on data provided
if (num == "best") {
return(df2[df2$rank == min(df2$rank), 1])
} else if (num == "worst") {
return(df2[df2$rank == max(df2$rank), 1])
} else if ((num <= max(df2$rank)) | (num >= min(df2$rank))) {
return(df2[df2$rank == num, 1])
} else if ((num > max(df2$rank)) | (num < min(df2$rank))) {
NA
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num){
# Read the file outcome-of-care-measures.csv
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
#validate supplied state and outcome
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(state %in% df$State)) {
stop("invalid state")
}
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
df2 <- df[df$State == state, c(2, 11)]
names(df2)[2] <- "Rate"
}
if (outcome == "heart failure") {
df2 <- df[df$State == state, c(2, 17)]
names(df2)[2] <- "Rate"
}
if (outcome == "pneumonia") {
df2 <- df[df$State == state, c(2, 23)]
names(df2)[2] <- "Rate"
}
# Remove rows where Ratings are not known.
df2 <- df2[!is.na(df2$Rate), ]
# Order the dataframe by Names to help in Ranking
df2 <- df2[order(df2[1]), ]
# head(df1) tail(df1)
# Set Rank
df2$rank <- rank(df2$Rate, ties.method = "first")
# Return the values based on data provided
if (num == "best") {
return(df2[df2$rank == min(df2$rank), 1])
} else if (num == "worst") {
return(df2[df2$rank == max(df2$rank), 1])
} else if ((num <= max(df2$rank)) | (num >= min(df2$rank))) {
return(df2[df2$rank == num, 1])
} else if ((num > max(df2$rank)) | (num < min(df2$rank))) {
NA
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df <- read.csv("./outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
# convert ratings to numeric
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
# Create a subset dataframe for given outcome
if (outcome == "heart attack") {
df1 <- df[, c(2, 7, 11)]
} else if (outcome == "heart failure") {
df1 <- df[, c(2, 7, 17)]
} else if (outcome == "pneumonia") {
df1 <- df[, c(2, 7, 23)]
}
# Rename Column name of Hospital name to Hospital
names(df1)[1] <- "hospital"
names(df1)[2] <- "state"
names(df1)[3] <- "Rate"
# Remove rows where Ratings are not known.
df1 <- df1[!is.na(df1$Rate), ]
# head(df1)
library(data.table)
dt <- as.data.table(df1[, c("hospital", "state", "Rate")])
# head(dt) Add ranking to the table dt1 <- dt[,list(hospital, rank =
# rank(Rate,ties.method = 'first')), by = state]
setkey(dt, state, Rate)
dt1 <- dt[, list(hospital, rank = rank(Rate, ties.method = "random")), by = state]
# dt1 <- dt[,list(hospital, Rate, rank = rank(Rate,ties.method = 'last')),
# by = state]
# =======================
if (num == "best") {
dt2 <- dt1[, list(rank = 1), by = state]
} else if (num == "worst") {
dt2 <- dt1[, list(rank = max(rank)), by = state]
} else {
dt2 <- dt1[, list(rank = num), by = state]
}
# =======================
setkey(dt2, state, rank)
setkey(dt1, state, rank)
return(as.data.frame(dt1[dt2, ][, list(hospital, state, rank)]))
}
r <- rankall("heart attack", 4)
bests("AK", "pneumonia")
rankall <- function(outcome, num = "best") {
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% outcomes)) {
stop("invalid outcome")
}
df <- read.csv("outcomes.csv", colClasses = c(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure = "character",
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia = "character",
Hospital.Name = "character"))
# convert ratings to numeric
df[, 11] <- suppressWarnings(as.numeric(df[, 11]))
df[, 17] <- suppressWarnings(as.numeric(df[, 17]))
df[, 23] <- suppressWarnings(as.numeric(df[, 23]))
# Create a subset dataframe for given outcome
if (outcome == "heart attack") {
df1 <- df[, c(2, 7, 11)]
} else if (outcome == "heart failure") {
df1 <- df[, c(2, 7, 17)]
} else if (outcome == "pneumonia") {
df1 <- df[, c(2, 7, 23)]
}
# Rename Column name of Hospital name to Hospital
names(df1)[1] <- "hospital"
names(df1)[2] <- "state"
names(df1)[3] <- "Rate"
# Remove rows where Ratings are not known.
df1 <- df1[!is.na(df1$Rate), ]
# head(df1)
library(table)
dt <- as.table(df1[, c("hospital", "state", "Rate")])
# head(dt) Add ranking to the table dt1 <- dt[,list(hospital, rank =
# rank(Rate,ties.method = 'first')), by = state]
setkey(dt, state, Rate)
dt1 <- dt[, list(hospital, rank = rank(Rate, ties.method = "random")), by = state]
# dt1 <- dt[,list(hospital, Rate, rank = rank(Rate,ties.method = 'last')),
# by = state]
# =======================
if (num == "best") {
dt2 <- dt1[, list(rank = 1), by = state]
} else if (num == "worst") {
dt2 <- dt1[, list(rank = max(rank)), by = state]
} else {
dt2 <- dt1[, list(rank = num), by = state]
}
# =======================
setkey(dt2, state, rank)
setkey(dt1, state, rank)
return(as.data.frame(dt1[dt2, ][, list(hospital, state, rank)]))
}
r <- rankall("heart attack", 4)
